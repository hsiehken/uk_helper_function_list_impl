// Adapted from PREVAIL:
// https://github.com/vbpf/ebpf-verifier/blob/0d43f5e58e5f1ff4f3f2da07258ea8970cb363b2/src/ebpf_base.h

#ifndef EBPF_HELPER_MODEL_H
#define EBPF_HELPER_MODEL_H

typedef enum _ebpf_return_type {
    EBPF_RETURN_TYPE_INTEGER = 0,
    EBPF_RETURN_TYPE_PTR_TO_MAP_VALUE_OR_NULL,
    EBPF_RETURN_TYPE_INTEGER_OR_NO_RETURN_IF_SUCCEED,
    EBPF_RETURN_TYPE_UNSUPPORTED,
} ebpf_return_type_t;

typedef enum _ebpf_argument_type {
    EBPF_ARGUMENT_TYPE_DONTCARE = 0,
    EBPF_ARGUMENT_TYPE_ANYTHING, // All values are valid, e.g., 64-bit flags.
    EBPF_ARGUMENT_TYPE_CONST_SIZE,
    EBPF_ARGUMENT_TYPE_CONST_SIZE_OR_ZERO,
    EBPF_ARGUMENT_TYPE_PTR_TO_CTX,
    EBPF_ARGUMENT_TYPE_PTR_TO_MAP,
    EBPF_ARGUMENT_TYPE_PTR_TO_MAP_OF_PROGRAMS,
    EBPF_ARGUMENT_TYPE_PTR_TO_MAP_KEY,
    EBPF_ARGUMENT_TYPE_PTR_TO_MAP_VALUE,
    EBPF_ARGUMENT_TYPE_PTR_TO_READABLE_MEM, // Memory must have been initialized.
    EBPF_ARGUMENT_TYPE_PTR_TO_READABLE_MEM_OR_NULL,
    EBPF_ARGUMENT_TYPE_PTR_TO_WRITABLE_MEM,
    EBPF_ARGUMENT_TYPE_UNSUPPORTED,
} ebpf_argument_type_t;

#endif